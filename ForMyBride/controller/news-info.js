"use strict";

app.controller("newsCtrl", function($location, newsF){
    var _public = this;

    _public.ToMain = function(){
        $location.path("/");
    };

    _public.exam_id="0";
    _public.ToExam = function(){
        $location.path("/exam/"+_public.exam_id);
    };

    _public.ToNewsInfo = function(){
        $location.path("/news-info");
    };

    _public.ToLoveStory = function(){
        $location.path("/love-story");
    };

    _public.ToExamResult = function(){
        $location.path("/result");
    };

    _public.ToHarryPotter = function(){
        $location.path("/lib_HP");
    };
    _public.Articles = newsF;
});

app.factory("newsF", function(){
    var Articles = {};

    Articles["TonyaMainInfo"] = {
        Title : "Эксклюзив!!! Волшебница, которая покорила мир, она среди нас!",
        Body : "В типичной реализации, std::shared_ptr содержит только два указателя: указатель на объект владения указатель на блок управления, " +
        "где блок управления является динамически-созданным объект, который содержит: указатель на управляемый объект или сам управляемый объектфункцию удаления" +
        " объекта аллокатор счетчик указателей shared_ptr, владеющих управляемым объектом счетчик указателей weak_ptr, которые ссылаются на управляемый объектКогда" +
        " указатель shared_ptr создан вызовом std::make_shared или std::allocate_shared, блок управления содержит сам управляемый объект, в качестве члена структуры данных." +
        " Когда указатель shared_ptr создан вызовом его конструктора, блок управления содержит указатель на управляемый объект.Указатель, содержащийся в shared_ptr идентичен тому," +
        " который вернет функция-член get(), в то время как указатель/объект, который хранится в блоке управления, будет удален, когда количество владеющих объектом указателей " +
        "достигнет нуля: данные указатели не обязательно равны друг другу.Деструктор shared_ptr уменьшает счетчик общих владельцев в контрольном блоке, и если этот счетчик достиг нуля," +
        " блок управления вызывает деструктор управляемого объекта, однако блок управления не освобождает себя до тех пор, пока счетчик std::weak_ptr также не достигнет нуля. Эксклюзив!!! " +
        "Волшебница, которая покорила мир, она среди нас! В типичной реализации, std::shared_ptr содержит только два указателя: указатель на объект владения указатель на блок управления, " +
        "где блок управления является динамически-созданным объект, который содержит: указатель на управляемый объект или сам управляемый объектфункцию удаления" +
        " объекта аллокатор счетчик указателей shared_ptr, владеющих управляемым объектом счетчик указателей weak_ptr, которые ссылаются на управляемый объектКогда" +
        " указатель shared_ptr создан вызовом std::make_shared или std::allocate_shared, блок управления содержит сам управляемый объект, в качестве члена структуры данных." +
        " Когда указатель shared_ptr создан вызовом его конструктора, блок управления содержит указатель на управляемый объект.Указатель, содержащийся в shared_ptr идентичен тому," +
        " который вернет функция-член get(), в то время как указатель/объект, который хранится в блоке управления, будет удален, когда количество владеющих объектом указателей " +
        "достигнет нуля: данные указатели не обязательно равны друг другу.Деструктор shared_ptr уменьшает счетчик общих владельцев в контрольном блоке, и если этот счетчик достиг нуля," +
        " блок управления вызывает деструктор управляемого объекта, однако блок управления не освобождает себя до тех пор, пока счетчик std::weak_ptr также не достигнет нуля."
    };

    return Articles;
});